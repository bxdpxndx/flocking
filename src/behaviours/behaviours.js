// Generated by CoffeeScript 1.9.0
(function() {
  var Align, AvoidCollision, Seek;

  Seek = (function() {
    function Seek(_at_target) {
      this.target = _at_target;
    }

    Seek.prototype.get = function(seeker) {
      var desired, target;
      target = this.target();
      if (target == null) {
        return new Vec2;
      }
      desired = (target.subtract(seeker.position)).truncate(seeker.max_speed);
      return desired.subtract(seeker.velocity);
    };

    return Seek;

  })();

  AvoidCollision = (function() {
    function AvoidCollision() {}

    AvoidCollision.prototype.get = function(entity, other) {
      var distance;
      distance = entity.position.subtract(other.position);
      if (distance.length() < 1e-3 || distance.length() > 100) {
        new Vec2(0, 0);
      }
      return distance.normalize().divide(Math.pow(distance.length(), 0.4));
    };

    return AvoidCollision;

  })();

  Align = (function() {
    function Align() {}

    Align.prototype.get = function(entity) {
      var a, alignment, distance, p, position, result, _i, _len, _ref, _ref1;
      alignment = entity.velocity.normalize();
      position = entity.position;
      _ref = this.entities();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], p = _ref1.position, a = _ref1.velocity;
        distance = position.subtract(p);
        if (distance.length() < 1e-3 || distance.length() > 150) {
          continue;
        }
        result = result.add(alignment.subtract(a.normalize()));
      }
      return result;
    };

    return Align;

  })();

}).call(this);
